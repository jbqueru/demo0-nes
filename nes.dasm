; Copyright 2022 Jean-Baptiste M. "JBQ" Queru
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;    http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.

; ######################################################################
; ######################################################################
; ###                                                                ###
; ###                                                                ###
; ###                           JBQ NES Test                         ###
; ###                                                                ###
; ###                                                                ###
; ######################################################################
; ######################################################################

	processor 6502

; ###################
; ##               ##
; ##  Definitions  ##
; ##               ##
; ###################

	include	"ppudefs.dasm"
        include "oamdefs.dasm"
        include "apudefs.dasm"
        include "joydefs.dasm"

; ###################
; ##               ##
; ##  iNES Header  ##
; ##               ##
; ###################
	org	$8000-16

	byte	"NES",$1A	; iNES file format identifier, 1A = EOF
	byte	2		; 2 * 16kB PRG ROM
	byte	1		; 1 * 8kB CHR ROM
	byte	%00000001	; iNES flags 6
		;||||||||
		;|||||||+-------- VRAM arrangement, 0 = vertical or mapper
                ;|||||||		  1 = horizontal
		;||||||+--------- Persistent 8kB PRG RAM at $6000
		;|||||+---------- Trainer (typically unused)
		;||||+----------- 4kB VRAM
		;++++------------ Low 4 bits of mapper number. 0 = NROM
	byte 	%00000000	; iNES flags 7
		;||||||||
		;|||||||+-------- VS Unisystem
		;||||||+--------- PlayChoice-10
		;||||++---------- 00 = iNES header format
		;++++------------ Upper 4 bits of mapper number
	byte	0,0,0,0,0,0,0,0	; iNes flags 8-15, reserved, use NES 2.0 format
        			; 	for extended features


; ####################
; ##                ##
; ##  Machine Init  ##
; ##                ##
; ####################

Reset:
; *** CPU setup ***
	LDX	#$FF		; set stack at $01FF (stack is always $01xx)
	TXS

	CLD			; disable BCD mode, not present in NES 2A03 CPU
	SEI			; inhibit maskable interrupts

; *** disable interrupt sources ***
	LDA	#$40
	STA	_APUSEQ		; inhibit APU sequencer interrupts

	LDA	#0
	STA	_APUDMCCTRL	; disable DMC interrupts
	LDX	_APUSTATUS	; clear DMC pending interrupt (side effect)

	STA	_PPUCTRL	; disable NMI VBL interrupts
	LDX	_PPUSTATUS	; clear NMI VBL pending interrupt (side effect)

; *** set hardware in baseline state ***
	STA	_PPUMASK	; disable graphics
	STA	_APUSTATUS	; disable audio

; *** wait until (at least) next VBL ***
PollVBL1:
	BIT	_PPUSTATUS
	BPL	PollVBL1

; *** clear RAM ***
	LDA	#0
	TAX
ClearRAM:
	STA	$0,X
	STA	$100,X
	STA	$200,X
	STA	$300,X
	STA	$400,X
	STA	$500,X
	STA	$600,X
	STA	$700,X
	INX
	BNE	ClearRAM

; *** wait until (at least) next VBL - from this point PPU is OK ***
PollVBL2:
	BIT	_PPUSTATUS
	BPL	PollVBL2

; *** enable NMI ***
	LDA	#%10000000
        STA	_PPUCTRL

; *** clear VRAM ***
	LDX	#$20
	LDY	#$00
	STX	_PPUADDR	; set PPU Address to $2000, beginning of VRAM
	STY	_PPUADDR

	LDY	#0		; 256 outer loops
	TYA
clearVRAM1:
	LDX	#16		; 16 inner loops, 4096 bytes
clearVRAM2:
	STA	_PPUDATA
	DEX
	BNE	clearVRAM2
	DEY
	BNE	clearVRAM1

; *** prepare OAM shadow with sprites out of the way ***
	CLC
	LDX	#64
InitSprite:
	LDA	#$FF
	STA	$200,Y
	TYA
	ADC	#4
	TAY
	DEX
	BNE	InitSprite

; #############
; ##         ##
; ##  Setup  ##
; ##         ##
; #############

	LDA	#0
	STA	$FF
waitVBLSetup:
	CMP	$FF
	BEQ	waitVBLSetup

; *** turn rendering on ***
	LDA	#%00011110
	STA	_PPUMASK

; *** init OAM data ***
	LDA	#$2
	STA	_OAMDMA

; *** set background color ***
	LDX	#$3F
	LDY	#$00
	STX	_PPUADDR
	STY	_PPUADDR
	LDA	#$14
	STA	_PPUDATA

; *** set sprite color ***
	LDY	#$11
	STX	_PPUADDR
	STY	_PPUADDR
	LDA	#$32
	STA	_PPUDATA

; *** reset address and scroll position after accessing PPU data ***
	LDY	#0
	STY	_PPUADDR
	STY	_PPUADDR
	STY	_PPUSCROLL
	STY	_PPUSCROLL

; #################
; ##             ##
; ##  Main loop  ##
; ##             ##
; #################

MainLoop:
	LDA	#0
	STA	$FF
waitVBLMain:
	CMP	$FF
	BEQ	waitVBLMain

	LDA	#$2
	STA	_OAMDMA

	JMP	MainLoop


; ##########################
; ##                      ##
; ##  Interrupt handlers  ##
; ##                      ##
; ##########################

NMIHandler
	INC	$FF
	RTI

IRQHandler
	RTI


; ###################
; ##               ##
; ##  CPU vectors  ##
; ##               ##
; ###################

	org	$FFFA
	word	NMIHandler
	word	Reset
	word	IRQHandler


; ################
; ##            ##
; ##  Graphics  ##
; ##            ##
; ################

	org	$10000		; not real, but gives the correct file layout

	byte	%11111110
	byte	%10000010
	byte	%10000010
	byte	%10000010
	byte	%10000010
	byte	%10000010
	byte	%11111110
	byte	%00000000

	byte	%00000000
	byte	%00000000
	byte	%00000000
	byte	%00000000
	byte	%00000000
	byte	%00000000
	byte	%00000000
	byte	%00000000

	byte	%10000010
	byte	%01000100
	byte	%00101000
	byte	%00010000
	byte	%00101000
	byte	%01000100
	byte	%10000010
	byte	%00000000

	byte	%00000000
	byte	%00000000
	byte	%00000000
	byte	%00000000
	byte	%00000000
	byte	%00000000
	byte	%00000000
	byte	%00000000

; ###########
; ##       ##
; ##  End  ##
; ##       ##
; ###########

; 345678901234567890123456789012345678901234567890123456789012345678901234567890
