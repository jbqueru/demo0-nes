; Copyright 2022 Jean-Baptiste M. "JBQ" Queru
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;    http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.

; ######################################################################
; ######################################################################
; ###                                                                ###
; ###                                                                ###
; ###                           JBQ NES Test                         ###
; ###                                                                ###
; ###                                                                ###
; ######################################################################
; ######################################################################

	processor 6502

; ###################
; ##               ##
; ##  Definitions  ##
; ##               ##
; ###################

; *** PPU registers ***
_PPUCTRL	=	$2000
_PPUMASK	=	$2001
_PPUSTATUS	=	$2002
_OAMADDR	=	$2003
_OAMDATA	=	$2004
_PPUSCROLL	=	$2005
_PPUADDR	=	$2006
_PPUDATA	=	$2007

; *** APU registers ***
_APUSQ1CTRL	=	$4000
_APUSQ1SWEEP	=	$4001
_APUSQ1LO	=	$4002
_APUSQ1HI	=	$4003
_APUSQ2CTRL	=	$4004
_APUSQ2SWEEP	=	$4005
_APUSQ2LO	=	$4006
_APUSQ2HI	=	$4007
_APUTRICTRL	=	$4008
_APUTRILO	=	$400a
_APUTRIHI	=	$400b
_APUNSECTRL	=	$400c
_APUNSELO	=	$400e
_APUNSEHI	=	$400f
_APUDMCCTRL	=	$4010
_APUDMCRAW	=	$4011
_APUDMCADDR	=	$4012
_APUDMCLEN	=	$4013
_OAMDMA		=	$4014
_APUSTATUS	=	$4015
_JOY1		=	$4016
_JOY2		=	$4017
_APUSEQ		=	$4017


; ###################
; ##               ##
; ##  iNES Header  ##
; ##               ##
; ###################
	org	$5ff0

	byte	"NES",$1a	; iNES file format identifier, 1A = EOF
	byte	2		; 2 * 16kB PRG ROM
	byte	1		; 1 * 8kB CHR ROM
	byte	%00000001	; iNES flags 6
		;||||||||
		;|||||||+-------- VRAM arrangement, 0 = vertical or mapper
                ;|||||||		  1 = horizontal
		;||||||+--------- Persistent 8kB PRG RAM at $6000
		;|||||+---------- Trainer (typically unused)
		;||||+----------- 4kB VRAM
		;++++------------ Low 4 bits of mapper number. 0 = NROM
	byte 	%00000000	; iNES flags 7
		;||||||||
		;|||||||+-------- VS Unisystem
		;||||||+--------- PlayChoice-10
		;||||++---------- 00 = iNES header format
		;++++------------ Upper 4 bits of mapper number
	byte	0,0,0,0,0,0,0,0	; iNes flags 8-15, reserved, 


; ####################
; ##                ##
; ##  Machine Init  ##
; ##                ##
; ####################
        org	$8000

Reset:
; *** CPU setup ***
	LDX	#$ff		; set stack at $1ff (implicit stack MSB is 1)
	TXS

	CLD			; disable BCD mode, not present in NES 2A03 CPU
	SEI			; inhibit maskable interrupts

; *** disable interrupt sources ***
	LDA	#$40
	STA	_APUSEQ		; inhibit APU sequencer interrupts

	LDA	#$00
	STA	_APUDMCCTRL	; disable DMC interrupts
	STA	_PPUCTRL	; disable NMI VBL interrupts
	LDX	_APUSTATUS	; clear DMC pending interrupt (side effect)
	LDX	_PPUSTATUS	; clear NMI VBL pending interrupt (side effect)

; *** set hardware in baseline state ***
	STA	_PPUMASK	; disable graphics
	STA	_APUSTATUS	; disable audio

; *** wait until (at least) next VBL ***
.waitVBL1:
	BIT	_PPUSTATUS
	BPL	.waitVBL1

; *** clear RAM ***
	TAX
.clearRAM:
	STA	$0,X
	STA	$100,X
	STA	$200,X
	STA	$300,X
	STA	$400,X
	STA	$500,X
	STA	$600,X
	STA	$700,X
	INX
	BNE	.clearRAM

; TODO: init VRAM

; *** wait until (at least) next VBL  ***
.waitVBL2:
	BIT	_PPUSTATUS
	BPL	.waitVBL2


; #############
; ##         ##
; ##  Setup  ##
; ##         ##
; #############

; *** set background color ***
	LDX	#$3f
	LDY	#$00
	STX	_PPUADDR
        STY	_PPUADDR
	LDA	#$14
	STA	_PPUDATA


; #################
; ##             ##
; ##  Main loop  ##
; ##             ##
; #################

MainLoop:
	JMP	MainLoop


; ##########################
; ##                      ##
; ##  Interrupt handlers  ##
; ##                      ##
; ##########################

NMIHandler
	RTI

IRQHandler
	RTI


; ###################
; ##               ##
; ##  CPU vectors  ##
; ##               ##
; ###################

	org	$fffa
	word	NMIHandler
	word	Reset
        word	IRQHandler

; 345678901234567890123456789012345678901234567890123456789012345678901234567890
